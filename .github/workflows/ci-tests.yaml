name: "CI Tests"
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
concurrency:
  group: build-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
jobs:
  codespell-check:
    name: "Check codespell conformance"
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: "Run codespell"
        uses: codespell-project/actions-codespell@v2
  docker-check:
    name: "Check Docker image"
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        cmake-build-type:
          - "Debug"
          - "Release"
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - name: "Build Docker image"
        uses: docker/build-push-action@v5
        with:
          build-args: |
            CAPIO_BUILD_TESTS=${{ matrix.cmake-build-type == 'Debug' && 'ON' || 'OFF' }}
            CAPIO_LOG=${{ matrix.cmake-build-type == 'Debug' && 'ON' || 'OFF' }}
            CMAKE_BUILD_TYPE=${{ matrix.cmake-build-type }}
          load: true
          tags: hpio/capio:latest
      - name: "Run test with Docker"
        run: |
          docker run --detach --rm              \
            --env CAPIO_DIR=/tmp                \
            --env CAPIO_LOG_LEVEL=-1            \
            --name capio-docker                 \
            hpio/capio:latest                   \
            capio_server --no-config
          docker exec                           \
            --env LD_PRELOAD=libcapio_posix.so  \
            capio-docker                        \
            sh -c "mkdir /tmp/test && touch /tmp/test/file1 && ls /tmp/test && rm -rf /tmp/test"
          docker stop capio-docker
  format-check:
    name: "Check ${{ matrix.path }} clang-format conformance"
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        path:
          - "src"
          - "tests"
    steps:
      - uses: actions/checkout@v4
      - name: "Run clang-format style check"
        uses: jidicula/clang-format-action@v4.11.0
        with:
          clang-format-version: "16"
          check-path: "${{ matrix.path }}"
  unit-tests:
    name: "Build ${{ matrix.build_type }} with ${{ matrix.cxx }}"
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        build_type:
          - Debug
          - Release
        cxx:
          - g++-9
          - g++-10
          - g++-11
          - g++-12
          - g++-13
          - clang-13
          - clang-14
          - clang-15
          - clang-16
          - clang-17
    steps:
      - uses: actions/checkout@v4
      - name: "Install packages"
        run: |
          sudo apt install -y \
            libcapstone-dev \
            libopenmpi-dev \
            ninja-build \
            openmpi-bin \
            pkg-config
      - name: "Get compiler version"
        run: |
          IFS='-' read -r -a COMPILER <<< "${{ matrix.cxx }}"
          echo "CXX_VERSION=${COMPILER[1]}" >> $GITHUB_ENV
      - name: "Install Clang"
        if: ${{ startsWith(matrix.cxx, 'clang-') }}
        run: |
          wget -O /tmp/llvm.sh https://apt.llvm.org/llvm.sh
          chmod u+x /tmp/llvm.sh
          sudo /tmp/llvm.sh ${{ env.CXX_VERSION }}
          rm -f /tmp/llvm.sh
      - name: "Install GCC"
        if: ${{ startsWith(matrix.cxx, 'g++-') }}
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
          sudo apt update
          sudo apt install -y ${{ matrix.cxx }}
      - name: "Run CMake"
        env:
          CXX: ${{ startsWith(matrix.cxx, 'clang-') && 'clang++' || 'g++' }}-${{ env.CXX_VERSION }}
        run: |
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                -DCAPIO_LOG=${{ matrix.build_type == 'Debug' && 'ON' || 'OFF' }} \
                -DCAPIO_BUILD_TESTS=ON \
                -G Ninja \
                -B build \
                -S ${GITHUB_WORKSPACE}
          cmake --build build -j $(nproc)
          sudo cmake --install build --prefix /usr/local
      - name: "Run CAPIO server"
        env:
          CAPIO_DIR: ${{ github.workspace }}
          CAPIO_LOG_LEVEL: -1
        run: mpirun -n 1 capio_server --no-config &
      - name: "Run tests"
        id: run-tests
        timeout-minutes: 2
        env:
          CAPIO_DIR: ${{ github.workspace }}
        run: |
          ctest \
            --build-config ${{ matrix.build_type }} \
            --output-on-failure \
            --stop-on-failure \
            --test-dir build/tests
      - name: "Show server log on failure"
        if: ${{ always() && steps.run-tests.outcome == 'failure' && matrix.build_type == 'Debug' }}
        run: cat server_rank_*.log